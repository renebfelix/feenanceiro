generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model billings_info {
  idBillingInfo          String            @id @default(uuid())
  descriptionBillingInfo String            @db.VarChar(255)
  dataBillingInfo        DateTime          @db.Date
  valueBillingInfo       Float             @db.Float
  deletedBillingInfo     DateTime?         @db.DateTime(0)
  typeBillingInfo        String            @db.VarChar(100)
  parcelBillingInfo      Int?
  idUserBillingInfo      String?
  divisionBillingInfo    Int
  categoryBillingInfo    String
  paymentBillingInfo     String
  valueTypeBillingInfo   String            @db.VarChar(100)
  dataCriacaoBillingInfo DateTime?         @db.DateTime(0)
  observationBillingInfo String            @default("")
  users                  users?            @relation(fields: [idUserBillingInfo], references: [idUser], onDelete: Restrict, onUpdate: Restrict, map: "billings_info_FK")
  cards                  cards             @relation(fields: [paymentBillingInfo], references: [idCard], onUpdate: Restrict, map: "billings_info_cards_FK")
  categories             categories        @relation(fields: [categoryBillingInfo], references: [idCategory], onUpdate: Restrict, map: "billings_info_categories_FK")
  billings_values        billings_values[]

  @@index([idUserBillingInfo], map: "billings_info_FK")
  @@index([paymentBillingInfo], map: "billings_info_cards_FK")
  @@index([categoryBillingInfo], map: "billings_info_categories_FK")
}

model billings_status {
  idBillingStatus             String          @id @default(uuid())
  idBillingValueBillingStatus String
  statusBillingStatus         String?         @db.VarChar(100)
  dateBillingStatus           DateTime?       @db.Date
  responsableBillingStatus    String
  billings_values             billings_values @relation(fields: [idBillingValueBillingStatus], references: [idBillingValue], onUpdate: Restrict, map: "billings_status_billings_values_FK")

  @@index([idBillingValueBillingStatus], map: "billings_status_billings_values_FK")
}

model billings_values {
  idBillingValue            String            @id @default(uuid())
  valueBillingValue         Float             @db.Float
  idBillingInfoBillingValue String
  dateBillingValue          DateTime?         @db.Date
  responsableBillingValue   String
  numberParcelBillingValue  Int?
  deletedBillingValue       DateTime?
  stopBillingValue       	DateTime?		  @db.Date
  billings_status           billings_status[]
  billings_info             billings_info     @relation(fields: [idBillingInfoBillingValue], references: [idBillingInfo], onUpdate: Restrict, map: "billing_values_FK")
  responsables              responsables      @relation(fields: [responsableBillingValue], references: [idResponsable], onUpdate: Restrict, map: "billings_values_responsables_FK")

  @@index([idBillingInfoBillingValue], map: "billing_values_FK")
  @@index([responsableBillingValue], map: "billings_values_responsables_FK")
}

model cards {
  idCard          String          @id @default(uuid())
  nameCard        String          @db.VarChar(100)
  dueDateCard     Int?
  closingDateCard Int?
  limitCard       Float?          @db.Float
  idUserCard      String
  deletedCard     DateTime?       @db.DateTime(0)
  typeCard        String          @db.VarChar(100)
  billings_info   billings_info[]
  users           users           @relation(fields: [idUserCard], references: [idUser], onUpdate: Restrict, map: "cards_FK")

  @@index([idUserCard], map: "cards_FK")
}

model categories {
  idCategory      String          @id @default(uuid())
  nameCategory    String          @db.VarChar(100)
  idUserCategory  String
  deletedCategory DateTime?       @db.DateTime(0)
  limitCategory   Float?          @db.Float
  billings_info   billings_info[]
  users           users           @relation(fields: [idUserCategory], references: [idUser], onUpdate: Restrict, map: "categories_users_FK")

  @@index([idUserCategory], map: "categories_users_FK")
}

model icons {
  idIcon    Int    @id @default(autoincrement())
  nameIcon  String @db.VarChar(100)
  fileIcone String @db.VarChar(100)
}

model reset_password {
  idReset             String  @id @default(uuid())
  idUserReset         String
  dateReset           Int
  dateExpirationReset Int
  finishedReset       Boolean
  users               users   @relation(fields: [idUserReset], references: [idUser], onUpdate: Restrict, map: "reset_password_users_FK")

  @@index([idUserReset], map: "reset_password_users_FK")
}

model responsables {
  idResponsable             String            @id @default(uuid())
  nameResponsable           String            @db.VarChar(100)
  deletedResponsable        DateTime?         @db.DateTime(0)
  idUserResponsable         String
  isDefaultResponsable      Boolean
  emailResponsable          String?
  isInvitedResponsable      Boolean           @default(false)
  acceptedInviteResponsable Boolean?
  idUserInvitedResponsalbe  String?
  billings_values           billings_values[]
  users                     users             @relation(fields: [idUserResponsable], references: [idUser], onUpdate: Restrict, map: "responsables_FK")

  @@index([idUserResponsable], map: "responsables_FK")
}

model refresh_token {
  idRefresh        String @id @default(uuid())
  expiresInRefresh Int
  idUserRefresh    String
  users            users  @relation(fields: [idUserRefresh], references: [idUser], onUpdate: Restrict, map: "refresh_token_users_FK")

  @@index([idUserRefresh], map: "refresh_token_users_FK")
}

model users {
  idUser         String           @id @default(uuid())
  usernameUser   String           @db.VarChar(100)
  emailUser      String           @db.VarChar(255)
  passwordUser   String           @db.VarChar(255)
  fullnameUser   String           @db.VarChar(255)
  limitUser      Float?           @db.Float
  photoUser      String?
  blockedUser    DateTime?        @db.DateTime(0)
  deletedUser    DateTime?        @db.DateTime(0)
  billings_info  billings_info[]
  cards          cards[]
  categories     categories[]
  refresh_token  refresh_token[]
  reset_password reset_password[]
  responsables   responsables[]
}
